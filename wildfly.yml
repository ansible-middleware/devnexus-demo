---
- name: Ensure Wildfly is install and running as a service
  hosts: all
  gather_facts: true
  become: true
  collections:
    - middleware_automation.wildfly
  roles:
    - middleware_automation.wildfly.wildfly_install
    - middleware_automation.wildfly.wildfly_systemd
  vars:
    packages_to_install:
      - unzip
      - firewalld
    wildfly_config_base: 'standalone-full.xml'
    ansible_nodename: localhost
    wildfly_enable_yml_config: true
    wildfly_yml_configs:
      - wildfly_config.yml.j2
    install_name: 'wildfly'
    configuration_file: "{{ wildfly_home }}/standalone/configuration/wildfly.xml"
    app_deploy_enabled: True
    app:
      - { name: 'info.war', url: 'https://drive.google.com/uc?export=download&id=13K7RCqccgH4zAU1RfOjYMehNaHB0A3Iq' }
  pre_tasks:
    - name: "Install packages: {{ packages_to_install }}"
      yum:
        name: "{{ item }}"
        state: latest
      loop: "{{ packages_to_install }}"

    - name: "Remove previous standalone configuration {{ configuration_file }}"
      ansible.builtin.file:
        path: "{{ configuration_file }}"
        state: absent
  
  tasks:
    - name: Enable and start the firewalld service
      become: yes
      ansible.builtin.systemd:
        name: firewalld
        enabled: yes
        state: started

    - name: "Configure firewall for EAP ports"
      ansible.posix.firewalld:
        port: "{{ item }}"
        permanent: true
        state: enabled
        immediate: yes
      loop:
        - 8009/tcp
        - 8080/tcp
        - 9990/tcp
        - 7600/tcp
        - 7601/tcp
  
  post_tasks:
    - name: "Deploy apps"
      when:
        - app_deploy_enabled 
      block:
        - name: "Download {{ app | length }} webapps."
          ansible.builtin.get_url:
            url: "{{ app[0].url }}"
            dest: "{{ wildfly_install_workdir }}/{{ app[0].name }}"
    
        - name: "Deploy {{ app | length }} webapp(s)"
          ansible.builtin.include_role:
            name: wildfly_utils
            tasks_from: jboss_cli.yml
          vars:
            jboss_home: "{{ wildfly_home }}"
            jboss_cli_query: "'deploy --force {{ wildfly_install_workdir }}/{{ app[0].name }}'"
    
        - name: "Validate that server is functionnal"
          ansible.builtin.include_role:
            name: middleware_automation.wildfly.wildfly_validation
    
    # - name: "Configure qpid for jboss cli"
    #   ansible.builtin.include_role:
    #     name: wildfly_utils
    #     tasks_from: jboss_cli.yml
    #   vars:
    #     jboss_home: "{{ wildfly_home }}"
    #     jboss_cli_query: "{{ item }}"
    #   with_items:
    #     - '/subsystem=ee:write-attribute(name=spec-descriptor-property-replacement,value=true)'
    #     - '/subsystem=ee:write-attribute(name=annotation-property-replacement,value=true)'
    #     - '/subsystem=ee:write-attribute(name=jboss-descriptor-property-replacement,value=true)'
    #     - '/subsystem=naming/binding=java\:global\/qpid:add(binding-type=external-context,class=javax.naming.InitialContext,module=org.jboss.genericjms.provider,environment={java.naming.factory.initial=org.apache.qpid.jms.jndi.JmsInitialContextFactory,queue.testQueue=testQueue,queue.outQueue=outQueue,connectionfactory.QpidBroker="amqp://localhost:5672?jms.username=guest&amp;jms.password=guest"})'
    #     - '/subsystem=naming/binding=java\:\/jms\/qpid\/queue\/testQueue:add(binding-type=lookup,lookup=java\:global\/qpid\/testQueue)'
    #     - '/subsystem=naming/binding=java\:\/jms\/qpid\/queue\/outQueue:add(binding-type=lookup,lookup=java\:global\/qpid\/outQueue)'
    #     - '/subsystem=resource-adapters/resource-adapter=apache-qpid:add(module=org.jboss.genericjms,transaction-support=NoTransaction)'
    #     - '/subsystem=resource-adapters/resource-adapter=apache-qpid/connection-definitions=QPIDCF:add(jndi-name=java\:\/jms\/qpid\/cf\/QpidBroker,class-name=org.jboss.resource.adapter.jms.JmsManagedConnectionFactory)'
    #     - '/subsystem=resource-adapters/resource-adapter=apache-qpid/connection-definitions=QPIDCF/config-properties=JndiParameters:add(value="java.naming.factory.initial=org.apache.qpid.jms.jndi.JmsInitialContextFactory;connectionfactory.QpidBroker=amqp://localhost:5672?jms.username=guest&jms.password=guest")'